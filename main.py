import requests
from bs4 import BeautifulSoup
import urllib.parse
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7368730334:AAH9xUG8G_Ro8mvV_fDQxd5ddkwjxHnBoeg'

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Google
def perform_file_search(user_query, file_type="xlsx", page=0):
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    google_query = f'"{user_query}" filetype:{file_type}'
    url = f"https://www.google.com/search?q={urllib.parse.quote(google_query)}&start={page*10}"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, 'html.parser')

    results = soup.find_all('div', class_='g')
    
    if results:
        response_text = f"–ë–æ—Ç –∏—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≥—É–≥–ª–µ:\n\"{user_query}\" filetype:{file_type}\n\n"
        response_text += f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{user_query}' (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}):\n\n"
        for i, result in enumerate(results[:1], start=page*1+1):
            title_element = result.find('h3')
            title = title_element.text.strip() if title_element else "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            link = result.find('a')['href'] if result.find('a') else "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            description = result.find('div', class_='VwiC3b').text.strip() if result.find('div', class_='VwiC3b') else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            site_name = urllib.parse.urlparse(link).netloc
            response_text += f"{i}. üè∑ {site_name}\nüîó {link}\nüè¥‚Äç‚ò†Ô∏è {title}\nüìã {description}\n\n"
    else:
        response_text = "–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç."

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = InlineKeyboardMarkup()
    next_button = InlineKeyboardButton("¬ª", callback_data=f"google_search_page;{user_query};{file_type};{page+1}")
    prev_button = InlineKeyboardButton("¬´", callback_data=f"google_search_page;{user_query};{file_type};{page-1}") if page > 0 else None

    if prev_button:
        keyboard.add(prev_button)
    keyboard.add(next_button)

    return response_text, keyboard

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ xlsx.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(content_types=['text'])
def handle_text_message(message):
    user_query = message.text.strip()
    response_text, keyboard = perform_file_search(user_query)
    bot.send_message(message.chat.id, response_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('google_search_page'))
def handle_pagination(call):
    try:
        _, user_query, file_type, page = call.data.split(';')
        page = int(page)
        response_text, keyboard = perform_file_search(user_query, file_type, page)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=response_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {str(e)}")
        bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True) 
